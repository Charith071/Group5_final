1:	localhost:8081/api/signin  				(method=post)
		parameters should be json object like below
			{
				"username":"user",
				"password":"pass"
			}

			if(success){
					status:200 (OK)
					return json object ;
			}else{
				status:400(BAD REQUEST)
				invalid username or password
			}




2: 	localhost:8081/api/signup  				(method=post)
		******for user registration*************
		parameters should be json object
			
			name
			address
			email
			gender
			username
			password
			type       			**(user)
			birth_date			**format=1994-5-19
			phone_number       	** no spaces between numbers
			gps
			guadiant_phone_number
			job
			profile_pic_name


			if(success){
					status:200 (OK)
					user registration is succcess!!
			}else{
				status:400(BAD REQUEST)
				registration fail...change username or password
			}

			******for counceller registration*************
		parameters should be json object
			
			name
			address
			email
			gender
			username
			password
			type       			**(counceller)
			birth_date			**format=1994-5-19
			phone_number       	** no spaces between numbers
			gps
			qualification       **string
			certificate			**string
			profile_pic_name


			if(success){
					status:200 (OK)
					counceller registration is succcess!!
			}else{
				status:400(BAD REQUEST)
				registration fail...change username or password
			}




***********update stress level of user*********************8
3: localhost:8081/api/level  				(method=post)
		parameters should be json object

			id          ** id of user
			level		** stress level

			if(success){
					status:200 (OK)
					return success ;
			}elseif(inalid user input){
					status :409 (CONFLICT)
					invalid user input
			}else{
				status:400(BAD REQUEST)
				update fail!! cannot find user
			}






4:localhost:8081/api/user/gps				(method=post)
	**update user current gps location

		parameters should be json object
			id          ** id of user
			gps			** gps location

			if(success){
					status:200 (OK)
					gps update success!!
			}elseif(inalid user input){
					status :409 (CONFLICT)
					invalid user input
			}else{
				status:400(BAD REQUEST)
				cannot find user
			}





5: localhost:8081/api/counceller/gps				(method=post)
	**update counceller gps location

		parameters should be json object
			id          ** id of counceller
			gps			** gps location

			if(success){
					status:200 (OK)
					gps update success!!
			}elseif(inalid user input){
					status :409 (CONFLICT)
					invalid user input
			}else{
				status:400(BAD REQUEST)
				cannot find counceller
			}
			



6: localhost:8081/api/ChangeProfilePicture				(method=post)
	**change profile picture

		parameters should be json object
			id          				** id of counceller or user
			profile_pic_name			** profile pic name

			if(success){
					status:200 (OK)
					update success!!
			}else{
				status:400(BAD REQUEST)
				update fail!! , Cannot find user
			}


			if(inalid user input){
					status :409 (CONFLICT)
					invalid user input
			}


			if(non exist id){
				status:400(BAD REQUEST)
				user is not exist!
			}




7: localhost:8081/api/getLevel				(method=post)
	**get user stress level

		parameters should be json object
			id          				** id of  user
			

			if(success){
					status:200 (OK)
					return strees level;
			}else{
				status:400(BAD REQUEST)
				cannot find user
			}


			if(inalid user input){
					status :409 (CONFLICT)
					invalid user input
			}






8:  localhost:8081/api/user/mapCounceller			(method=post)
	**map counceller by user*******

		parameters:should be json object
			*user_id          				** id of  user
			*counceller_id					**id of counceller that selected by user



			if(mapping success){
					status: 200 (OK)
					counceller mapping  success
			}else{
				status:400  (BAD REQUEST)
				mapping fail
			}


			if(user already have two councellers){
				status:400  (BAD REQUEST)
				u have already two councellers
			}

			if(user already has counceler that try to map again){
				status:400  (BAD REQUEST)
				alredy has a this counceller
			}


			if(user send non exist ids){
				status:400  (BAD REQUEST)
				user or counceller does not exist

			}

			if(user send invalid inputs){
				status:409  (CONFLICT)
				invalid user input
			}



9: localhost:8081/api/chat			(method=post)
*****************chat counceller vs user*******************
(pre requariments:for chat....user have mapped councellers)


	json parametes:
			sender_id
			receiver_id
			date_time
			msg




10: localhost:8081/api/PatientDetails		(method=post)
----------------(get patient details by counceller)------------
	preRequirements: user belongs to counceller(should be map)

	json parameters:
			*counceller_id    		** counceller id who view his patient details
			*patient_id				** patient id who belongs to that counceller


			if(success){
				status:200(OK)
				return json object of patient details
			}

			if(patient is not belongs to that counceller){
				status : 400(BADREQUEST)
				return: Not your patient
			}

			if(request ids not a valid id){
				status : 400(BADREQUEST)
				return: Not valid user or Counceller
			}

			if(request json object is not valid){
				status: 409
				return : invalid user inputs;
			}






11: localhost:8081/api/admin/accessControll		(method=get)
	-------------(admin can cotroll access of any user by changing all_user.status as "enable" or "disable")---------------------------------

	** not a json request...its a like a form type get request........

	request parameters:
		#admin_id         (adminitartor id)
		#controller_id		(user or counceller id)
		#status				(enable or disable)

		if(success){
			return status:200
			access controlled success!!
		}


		if(cotroller_id  not belongs to user or counceller){
			return status:400 (Bad REQUEST)
			Invalid user or Counceller
		}


		if(status not equals to "enable" or "disable"){
			return status:400 (Bad REQUEST)
			Invalid status
		}


		if(admin_id is not not valid){
			return status:400 (Bad REQUEST)
			Invalid Admin
		}


		if(users are not exist){
			return status:400 (Bad REQUEST)
			Cannot find users
		}


		if(any inputs mistake){
			return status:400 (Bad REQUEST)
			invalid user inputs
		}



12: http://localhost:8081/api/addTrack    (method =post)
++++++++++++++++++(counceller or admin can add misuc track=============)
	the parameter should be json object

	parameter:
		{
			"counceller_id":"6",          **(who add the track)
			"description":"lol", 
			"name":"ndormalmudsic", 	**(name of the track)
			"max_stress_level":"5", 	
			"min_stress_level": "4"
		}


		if(update success){
			return status:200
			update success
		}

		if(is not valid counceller or admin){
			return status:400
			Not a valid Counceller
		}


		if(counceller not exist in tha database){
			return status:400
			Cannot find Counceller
		}


		if(max and min stress level are invalid){
			return status:400
			max stress level should grater than min stress level
		}


		if(track name is already exist){
			return status:400
			the track name is already exist!!
		}

		if(invalid user inputs){
			return status:400
			invalid user inputs
		}



13: http://localhost:8081/api/admin/controllTracks    (methos=get)
	+++++++++++++++controll music track by admin+++++++++++++
		admin can cotroll music track by changig status as enable,disable,delete

		parameters:
			*admin_id       	(admin id)
			*track_id 			(track id that want to controll)
			*status				(enable or disable or delete)


			if(status is delete){
				return status: 200
				delete successfully!	
			}

			if(status is enable or disable){
				return status: 200
				status changed!
			}


			if(invalid user input){
				return status: 400
				invalid user inputs
			}


			if(admin id is not exist){
				return status: 400
				Cannot find Admin
			}

			if(id type is not admin){
				return status: 400
				Invalid admin
			}


			if(music track is not exist in database){
				return status: 400
				Cannot find music Track
			}

			if(type not equal to enable or disable or delete){
				return status: 400
				Invalid status
			}



********************thats it for now***************************
